#!/usr/bin/env python
# coding=utf-8
"""
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#
  Ontology Engineering Group
        http://www.oeg-upm.net/
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#
  Copyright (C) 2017 Ontology Engineering Group.
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, eit her express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#
"""

import multiprocessing
import os
import traceback
from random import shuffle
from threading import Thread

import gunicorn.app.base
from concurrent.futures import ThreadPoolExecutor, wait
from gunicorn.six import iteritems
from redis_cache import cache_it_json

from geo_pass import debug, info
from geo_pass.api import app, api, g_area, g_area_geom, get_way_attrs, g_area_names, get_area_buildings, cache_proc, \
    get_free_area

__author__ = 'Fernando Serena'

API_PORT = int(os.environ.get('API_PORT', 5006))


def number_of_workers():
    return (multiprocessing.cpu_count() * 2) + 1


pool = ThreadPoolExecutor(max_workers=number_of_workers())


class StandaloneApplication(gunicorn.app.base.BaseApplication):
    def init(self, parser, opts, args):
        pass

    def __init__(self, options=None):
        self.options = options or {}
        self.application = app
        super(StandaloneApplication, self).__init__()

    def load_config(self):
        config = dict([(key, value) for key, value in iteritems(self.options)
                       if key in self.cfg.settings and value is not None])
        for key, value in iteritems(config):
            self.cfg.set(key.lower(), value)

    def load(self):
        return self.application


def chunks(l, n):
    """Yield successive n-sized chunks from l."""
    for i in xrange(0, len(l), n):
        yield l[i:i + n]


lock = multiprocessing.Lock()


def load_buildings(r, ctx):
    buildings = get_area_buildings(str(r['id']))
    n_buildings = len(buildings)
    if n_buildings:
        info('Loading {} buildings from '.format(n_buildings) + r['tag']['name'] + '...')
        with lock:
            ctx['buildings_found'] += n_buildings
        for b in buildings:
            b_id = b['id'].replace('way/', '')
            get_way_attrs(b_id, True, None)
            with lock:
                ctx['buildings_loaded'] += 1
            try:
                info('Loaded building ' + b_id +
                     ' ({}/{}) - {:.2f}% - {:.2f}%'.format(ctx['buildings_loaded'],
                                                           ctx['buildings_found'],
                                                           ctx['buildings_loaded'] * 100.0 /
                                                           ctx['buildings_found'],
                                                           ctx['buildings_loaded'] * 100.0 /
                                                           ctx['total_buildings']))
            except Exception:
                pass


def crawl_areas():
    res = api.query(u"""
                        /*blah*/
                        area[boundary=administrative][type][admin_level][name];
                        out count;
                    """, expire=86400)
    total_areas = res['areas']
    res = api.query(u"""            
                            way[building]["building"!~"no"];                            
                            out count;
                        """, expire=86400)
    total_buildings = res['ways']

    ctx = {
        'total_areas': total_areas,
        'total_buildings': total_buildings,
        'areas_loaded': 0,
        'buildings_loaded': 0,
        'buildings_found': 0

    }

    debug('Total areas: ' + str(total_areas))
    debug('Total buildings: ' + str(total_buildings))
    admin_levels = range(2, 11)
    shuffle(admin_levels)
    # admin_levels = [6]
    for admin_level in admin_levels:
        try:
            res = api.query(u"""
                                area[boundary=administrative][type][admin_level={}][name];
                                out;
                            """.format(admin_level))

            for chunk in chunks(list(res.areas), 4):
                futures = []
                for area in chunk:
                    with lock:
                        ctx['areas_loaded'] += 1
                    try:
                        info(u'Loading area: [{}:{}] {} - ({}/{}) - {:.2f}%'.format(area.id, admin_level,
                                                                                    area.tags['name'],
                                                                                    ctx['areas_loaded'],
                                                                                    total_areas,
                                                                                    ctx[
                                                                                        'areas_loaded'] * 100.0 / total_areas))
                    except Exception:
                        pass
                    future = pool.submit(g_area, str(area.id))
                    futures.append(future)
                wait(futures)
                results = [future.result() for future in futures]
                for r in results:
                    pool.submit(load_buildings, r, ctx)
        except Exception as e:
            traceback.print_exc()
            debug(e.message)


def get_all_area_geoms():
    names = g_area_names()
    for _, an in names.items():
        try:
            for a in an:
                g_area_geom(str(a['id']))
        except Exception:
            pass


if __name__ == '__main__':

    if os.environ.get('CRAWL', None):
        crawl_th = Thread(target=crawl_areas)
        crawl_th.daemon = True
        crawl_th.start()

        geom_th = Thread(target=get_all_area_geoms)
        geom_th.daemon = True
        geom_th.start()

    try:
        options = {
            'bind': '%s:%s' % ('0.0.0.0', str(API_PORT)),
            'workers': number_of_workers(),
            'threads': 1,
            'workerconnections': 1000,
            'timeout': 4000,
            'workerclass': 'gthread',
            'errorlog': '-',
            'accesslog': '-'
        }
        StandaloneApplication(options).run()
    except (KeyboardInterrupt, SystemExit, SystemError):
        pool.shutdown(wait=False)
